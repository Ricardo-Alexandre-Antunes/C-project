// dictionaries: allows simple translations

booleanValue ::= [
   "true":"true",
   "false":"false",
   default:"null"
]

typeValue ::= [
   "integer":"int",
   "boolean":"boolean",
   "text":"String",
   default:"null"
]

typeFormat ::= [
   "integer":"",
   "boolean":"",
   "text":""
   default:"null"
]

questionType ::= [
   "HoleQuestion":"HoleQuestion",
   "CodeOpenQuestion":"CodeOpenQuestion",
   "OpenQuestion":"OpenQuestion",
   "CodeHoleQuestion":"CodeHoleQuestion",
]


// templates:

module(name, stat) ::= <<
public class <name> {
   public static void main(String[] args) {
      Scanner scanner = new Scanner(System.in);
      Result result = new Result();
      String filename = "result.txt";

      <stats(stat)>

      scanner.close();
   }
}
>>

declaration(type, var) ::= <<
<type> <var>;
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

assignBase(stat,var,value) ::= <<
<stats(stat)>
<var> = <value>;
>>

assignmentNew(var, type, value) ::= <<
<var> = new <type>(<if(value)><value><endif>)
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"

print(stat,value) ::= <<
<stats(stat)>
System.out.print(<value>);
>>

println(stat,value) ::= <<
<stats(stat)>
System.out.println(<value>);
>>

scanner_next(var) ::= <<
<var> = sc.next();
>>

conditional(stat,var,stat_true,stat_false) ::= <<
<stats(stat)>
if (<var>) {
   <stat_true>
}<if(stat_false)>
else {
   <stat_false>
}<endif>
>>

literalBoolean(value) ::= "<booleanValue.(value)>"

stringArray(var, text) ::= "String[] <var> = {<text; separator=", ">} 

NewQuestion(type, var, question, code, solution, grades, id) ::= <%
   QuestionInterface <var> = new <questionType.(type)>(result, <question>, <if(code)> <code> <endif>, <if(solution)> <solution> <endif>, <if(grades)> <grades> <endif> ,<id>)
%>

NewQuestionManager(type, id) ::= <%
   QuestionManager questionManager_<id> = new QuestionManager("<id>");
%>

AddQuestion(questionManager, question) ::= <%
   <questionManager>.addQuestion(<question>);
%>

NewCode(var, code)::= <%
   Code <var> = new Code(<code>)
%>

ExecuteQuestion(var, question) ::= <%
   <if(var)>var = <endif><question>.execute(scanner);
%>

ExportResults(filename, stat) ::= <<
   try (BufferedWriter writer = new BufferedWriter(new Filewriter(filename))) {
      <stat; separator=";\n">
      result.exportToFile(writer);
   } catch (IOException e) {
      e.printStackTrace(); //erro personalizado?
   }
>>

AskName(scanner, prompt) ::= <%
   System.out.print(prompt);
   name = scanner.next();
   result.setName(name);
%>

AskId(scanner, prompt) ::= <%
   System.out.print(prompt);
   id = scanner.nextInt();
   result.setId(id);
   scanner.nextLine();
%>

